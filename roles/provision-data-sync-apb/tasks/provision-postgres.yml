- name: Postgresql PVC
  k8s_v1_persistent_volume_claim:
    name: "{{ postgres_claim_name}}"
    namespace: "{{ namespace }}"
    labels:
      app: data-sync
      service: data-sync-server
    access_modes:
      - ReadWriteMany
    resources_requests:
      storage: '{{ POSTGRES_STORAGE_SIZE }}Gi'
    state: present

- name: create postgres deployment config
  openshift_v1_deployment_config:
    name: '{{ postgres_service_name }}'
    namespace: '{{ namespace }}'
    labels:
      app: data-sync
      service: data-sync-server
    replicas: 1
    selector:
      app: postgres
      service: data-sync-server
    spec_template_metadata_labels:
      app: postgres
      service: data-sync-server
    containers:
    - name: postgresql
      image: "{{ postgres_image }}:{{ postgres_version }}"
      imagePullPolicy: IfNotPresent
      ports:
        - container_port: "{{ postgres_port }}"
      env:
      - name: POSTGRESQL_PASSWORD
        value: "{{ postgres_password }}"
      - name: POSTGRESQL_USER
        value: "{{ postgres_user }}"
      - name: POSTGRESQL_DATABASE
        value: "{{ postgres_database }}"
      volumeMounts:
        - mountPath: /var/lib/pgsql/data
          name: "{{ postgres_claim_name}}"
    volumes:
      - name: "{{ postgres_claim_name}}"
        persistentVolumeClaim:
          claimName: "{{ postgres_claim_name}}"

- name: Create db internal service
  k8s_v1_service:
    name: '{{ postgres_service_name }}'
    namespace: '{{ namespace }}'
    labels:
      app: data-sync
      service: data-sync-server
    selector:
      app: postgres
      service: data-sync-server
    ports:
      - name: postgres
        port: "{{ postgres_port }}"
        target_port: "{{ postgres_port }}"


  # Check the containers in the postgres pod and make sure they are all ready
- name: "Wait for all postgres containers to become ready"
  shell: oc get pods --namespace={{ namespace }} --selector="deploymentconfig={{ postgres_service_name }}" -o jsonpath='{.items[*].status.containerStatuses[?(@.ready==true)].ready}'| wc -w
  register: postgres_result
  until: postgres_result.stdout.find("1") != -1
  retries: 30
  delay: 10