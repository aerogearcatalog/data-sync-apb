- name: Create data-sync-server service
  k8s_v1_service:
    name: data-sync-server
    namespace: '{{ namespace }}'
    labels:
      app: data-sync
      service: data-sync-server
    selector:
      app: data-sync
      service: data-sync-server
    ports:
      - name: web
        port: 443
        target_port: '{{ sync_server_port }}'

- name: Create data-sync-server https route
  openshift_v1_route:
    annotations:
      console.alpha.openshift.io/overview-app-route: 'true'
    name: data-sync-server
    namespace: '{{ namespace }}'
    labels:
      app: data-sync
      service: data-sync-server
    to_name: data-sync-server
    spec_port_target_port: web
    tls_termination: edge
    tls_insecure_edge_termination_policy: Redirect
  register: data_sync_server_route


- name: Create data-sync-server deployment config
  openshift_v1_deployment_config:
    name: data-sync-server
    namespace: '{{ namespace }}'
    labels:
      app: data-sync
      service: data-sync-server
    replicas: 1
    selector:
      app: data-sync
      service: data-sync-server
    spec_template_metadata_labels:
      app: data-sync
      service: data-sync-server
    spec_template_metadata_annotations:
      org.aerogear.metrics/plain_endpoint: /metrics
    containers:
    - name: data-sync-server
      image: '{{ sync_server_image }}:{{ sync_server_version }}'
      imagePullPolicy: Always
      ports:
       - containerPort: 8000
         protocol: TCP
      readinessProbe:
        httpGet:
          path: /healthz
          port: "{{ sync_server_port }}"
        initialDelaySeconds: 15
        timeoutSeconds: 1
      env:
      - name: POSTGRES_HOST
        value: "{{ postgres_service_name }}"
      - name: POSTGRES_PORT
        value: "{{ postgres_port|string }}"
      - name: POSTGRES_PASSWORD
        value: "{{ postgres_password}}"
      - name: POSTGRES_USERNAME
        value: "{{ postgres_user}}"
      - name: POSTGRES_DATABASE
        value: "{{ postgres_database }}"
      - name: QUERY_DEPTH_LIMIT
        value: "{{ query_depth_limit }}"
      - name: COMPLEXITY_LIMIT
        value: "{{ complexity_limit }}"
      # - name: HTTP_PORT
      #   value: "{{ sync_server_port }}"

# Create the configmap used for the client config
- name: Create data-sync configmap template
  template:
    src: client-configmap.yml.j2
    dest: /tmp/client-configmap.yaml
  when: _apb_service_instance_id is defined

- name: Create data-sync test configmap template
  template:
    src: client-configmap-test.yml.j2
    dest: /tmp/client-configmap.yaml
  when: _apb_service_instance_id is not defined

- name: Create data-sync-server public client config map
  shell: oc create -f /tmp/client-configmap.yaml -n {{ namespace }}

- name: delete configmap template file
  file: path=/tmp/client-configmap.yaml state=absent

# Check the containers in the data-sync-server pod and make sure they are all ready
- name: "Wait for all data-sync-server containers to become ready"
  shell: oc get pods --namespace={{ namespace }} --selector="deploymentconfig=data-sync-server" -o jsonpath='{.items[*].status.containerStatuses[?(@.ready==true)].ready}'| wc -w
  register: aerogear_app_data_sync_server_result
  until: aerogear_app_data_sync_server_result.stdout.find("1") != -1
  retries: 30
  delay: 10
